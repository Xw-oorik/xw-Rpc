// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_test_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_test_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_test_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_test_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_test_2eproto;
namespace mytest {
class Detail;
struct DetailDefaultTypeInternal;
extern DetailDefaultTypeInternal _Detail_default_instance_;
class ErrCode;
struct ErrCodeDefaultTypeInternal;
extern ErrCodeDefaultTypeInternal _ErrCode_default_instance_;
class GetUserFriendRep;
struct GetUserFriendRepDefaultTypeInternal;
extern GetUserFriendRepDefaultTypeInternal _GetUserFriendRep_default_instance_;
class GetUserFriendReq;
struct GetUserFriendReqDefaultTypeInternal;
extern GetUserFriendReqDefaultTypeInternal _GetUserFriendReq_default_instance_;
class LogRequest;
struct LogRequestDefaultTypeInternal;
extern LogRequestDefaultTypeInternal _LogRequest_default_instance_;
class LogResponse;
struct LogResponseDefaultTypeInternal;
extern LogResponseDefaultTypeInternal _LogResponse_default_instance_;
}  // namespace mytest
PROTOBUF_NAMESPACE_OPEN
template<> ::mytest::Detail* Arena::CreateMaybeMessage<::mytest::Detail>(Arena*);
template<> ::mytest::ErrCode* Arena::CreateMaybeMessage<::mytest::ErrCode>(Arena*);
template<> ::mytest::GetUserFriendRep* Arena::CreateMaybeMessage<::mytest::GetUserFriendRep>(Arena*);
template<> ::mytest::GetUserFriendReq* Arena::CreateMaybeMessage<::mytest::GetUserFriendReq>(Arena*);
template<> ::mytest::LogRequest* Arena::CreateMaybeMessage<::mytest::LogRequest>(Arena*);
template<> ::mytest::LogResponse* Arena::CreateMaybeMessage<::mytest::LogResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mytest {

enum Detail_Sex : int {
  Detail_Sex_MAN = 0,
  Detail_Sex_WOMAN = 1,
  Detail_Sex_Detail_Sex_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Detail_Sex_Detail_Sex_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Detail_Sex_IsValid(int value);
constexpr Detail_Sex Detail_Sex_Sex_MIN = Detail_Sex_MAN;
constexpr Detail_Sex Detail_Sex_Sex_MAX = Detail_Sex_WOMAN;
constexpr int Detail_Sex_Sex_ARRAYSIZE = Detail_Sex_Sex_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Detail_Sex_descriptor();
template<typename T>
inline const std::string& Detail_Sex_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Detail_Sex>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Detail_Sex_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Detail_Sex_descriptor(), enum_t_value);
}
inline bool Detail_Sex_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Detail_Sex* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Detail_Sex>(
    Detail_Sex_descriptor(), name, value);
}
// ===================================================================

class LogRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mytest.LogRequest) */ {
 public:
  inline LogRequest() : LogRequest(nullptr) {}
  ~LogRequest() override;
  explicit constexpr LogRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LogRequest(const LogRequest& from);
  LogRequest(LogRequest&& from) noexcept
    : LogRequest() {
    *this = ::std::move(from);
  }

  inline LogRequest& operator=(const LogRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogRequest& operator=(LogRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LogRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogRequest* internal_default_instance() {
    return reinterpret_cast<const LogRequest*>(
               &_LogRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LogRequest& a, LogRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LogRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LogRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LogRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LogRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LogRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mytest.LogRequest";
  }
  protected:
  explicit LogRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPwdFieldNumber = 2,
  };
  // bytes name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bytes pwd = 2;
  void clear_pwd();
  const std::string& pwd() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pwd(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pwd();
  PROTOBUF_NODISCARD std::string* release_pwd();
  void set_allocated_pwd(std::string* pwd);
  private:
  const std::string& _internal_pwd() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pwd(const std::string& value);
  std::string* _internal_mutable_pwd();
  public:

  // @@protoc_insertion_point(class_scope:mytest.LogRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pwd_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_2eproto;
};
// -------------------------------------------------------------------

class LogResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mytest.LogResponse) */ {
 public:
  inline LogResponse() : LogResponse(nullptr) {}
  ~LogResponse() override;
  explicit constexpr LogResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LogResponse(const LogResponse& from);
  LogResponse(LogResponse&& from) noexcept
    : LogResponse() {
    *this = ::std::move(from);
  }

  inline LogResponse& operator=(const LogResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogResponse& operator=(LogResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LogResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogResponse* internal_default_instance() {
    return reinterpret_cast<const LogResponse*>(
               &_LogResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LogResponse& a, LogResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LogResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LogResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LogResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LogResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LogResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mytest.LogResponse";
  }
  protected:
  explicit LogResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrmsgFieldNumber = 2,
    kErrcodeFieldNumber = 1,
    kSuccessfulFieldNumber = 3,
  };
  // bytes errmsg = 2;
  void clear_errmsg();
  const std::string& errmsg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_errmsg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_errmsg();
  PROTOBUF_NODISCARD std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // int32 errcode = 1;
  void clear_errcode();
  int32_t errcode() const;
  void set_errcode(int32_t value);
  private:
  int32_t _internal_errcode() const;
  void _internal_set_errcode(int32_t value);
  public:

  // bool successful = 3;
  void clear_successful();
  bool successful() const;
  void set_successful(bool value);
  private:
  bool _internal_successful() const;
  void _internal_set_successful(bool value);
  public:

  // @@protoc_insertion_point(class_scope:mytest.LogResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
  int32_t errcode_;
  bool successful_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_2eproto;
};
// -------------------------------------------------------------------

class ErrCode final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mytest.ErrCode) */ {
 public:
  inline ErrCode() : ErrCode(nullptr) {}
  ~ErrCode() override;
  explicit constexpr ErrCode(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ErrCode(const ErrCode& from);
  ErrCode(ErrCode&& from) noexcept
    : ErrCode() {
    *this = ::std::move(from);
  }

  inline ErrCode& operator=(const ErrCode& from) {
    CopyFrom(from);
    return *this;
  }
  inline ErrCode& operator=(ErrCode&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ErrCode& default_instance() {
    return *internal_default_instance();
  }
  static inline const ErrCode* internal_default_instance() {
    return reinterpret_cast<const ErrCode*>(
               &_ErrCode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ErrCode& a, ErrCode& b) {
    a.Swap(&b);
  }
  inline void Swap(ErrCode* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ErrCode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ErrCode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ErrCode>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ErrCode& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ErrCode& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ErrCode* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mytest.ErrCode";
  }
  protected:
  explicit ErrCode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrmsgFieldNumber = 2,
    kErrcodeFieldNumber = 1,
  };
  // bytes errmsg = 2;
  void clear_errmsg();
  const std::string& errmsg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_errmsg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_errmsg();
  PROTOBUF_NODISCARD std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // int32 errcode = 1;
  void clear_errcode();
  int32_t errcode() const;
  void set_errcode(int32_t value);
  private:
  int32_t _internal_errcode() const;
  void _internal_set_errcode(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mytest.ErrCode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
  int32_t errcode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_2eproto;
};
// -------------------------------------------------------------------

class Detail final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mytest.Detail) */ {
 public:
  inline Detail() : Detail(nullptr) {}
  ~Detail() override;
  explicit constexpr Detail(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Detail(const Detail& from);
  Detail(Detail&& from) noexcept
    : Detail() {
    *this = ::std::move(from);
  }

  inline Detail& operator=(const Detail& from) {
    CopyFrom(from);
    return *this;
  }
  inline Detail& operator=(Detail&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Detail& default_instance() {
    return *internal_default_instance();
  }
  static inline const Detail* internal_default_instance() {
    return reinterpret_cast<const Detail*>(
               &_Detail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Detail& a, Detail& b) {
    a.Swap(&b);
  }
  inline void Swap(Detail* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Detail* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Detail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Detail>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Detail& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Detail& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Detail* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mytest.Detail";
  }
  protected:
  explicit Detail(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Detail_Sex Sex;
  static constexpr Sex MAN =
    Detail_Sex_MAN;
  static constexpr Sex WOMAN =
    Detail_Sex_WOMAN;
  static inline bool Sex_IsValid(int value) {
    return Detail_Sex_IsValid(value);
  }
  static constexpr Sex Sex_MIN =
    Detail_Sex_Sex_MIN;
  static constexpr Sex Sex_MAX =
    Detail_Sex_Sex_MAX;
  static constexpr int Sex_ARRAYSIZE =
    Detail_Sex_Sex_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Sex_descriptor() {
    return Detail_Sex_descriptor();
  }
  template<typename T>
  static inline const std::string& Sex_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Sex>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Sex_Name.");
    return Detail_Sex_Name(enum_t_value);
  }
  static inline bool Sex_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Sex* value) {
    return Detail_Sex_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kIdFieldNumber = 1,
    kAgeFieldNumber = 3,
    kSexFieldNumber = 4,
  };
  // bytes name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // uint32 age = 3;
  void clear_age();
  uint32_t age() const;
  void set_age(uint32_t value);
  private:
  uint32_t _internal_age() const;
  void _internal_set_age(uint32_t value);
  public:

  // .mytest.Detail.Sex sex = 4;
  void clear_sex();
  ::mytest::Detail_Sex sex() const;
  void set_sex(::mytest::Detail_Sex value);
  private:
  ::mytest::Detail_Sex _internal_sex() const;
  void _internal_set_sex(::mytest::Detail_Sex value);
  public:

  // @@protoc_insertion_point(class_scope:mytest.Detail)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  uint32_t id_;
  uint32_t age_;
  int sex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_2eproto;
};
// -------------------------------------------------------------------

class GetUserFriendReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mytest.GetUserFriendReq) */ {
 public:
  inline GetUserFriendReq() : GetUserFriendReq(nullptr) {}
  ~GetUserFriendReq() override;
  explicit constexpr GetUserFriendReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetUserFriendReq(const GetUserFriendReq& from);
  GetUserFriendReq(GetUserFriendReq&& from) noexcept
    : GetUserFriendReq() {
    *this = ::std::move(from);
  }

  inline GetUserFriendReq& operator=(const GetUserFriendReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetUserFriendReq& operator=(GetUserFriendReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetUserFriendReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetUserFriendReq* internal_default_instance() {
    return reinterpret_cast<const GetUserFriendReq*>(
               &_GetUserFriendReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetUserFriendReq& a, GetUserFriendReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetUserFriendReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetUserFriendReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetUserFriendReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetUserFriendReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetUserFriendReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetUserFriendReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetUserFriendReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mytest.GetUserFriendReq";
  }
  protected:
  explicit GetUserFriendReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint32 id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mytest.GetUserFriendReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_2eproto;
};
// -------------------------------------------------------------------

class GetUserFriendRep final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mytest.GetUserFriendRep) */ {
 public:
  inline GetUserFriendRep() : GetUserFriendRep(nullptr) {}
  ~GetUserFriendRep() override;
  explicit constexpr GetUserFriendRep(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetUserFriendRep(const GetUserFriendRep& from);
  GetUserFriendRep(GetUserFriendRep&& from) noexcept
    : GetUserFriendRep() {
    *this = ::std::move(from);
  }

  inline GetUserFriendRep& operator=(const GetUserFriendRep& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetUserFriendRep& operator=(GetUserFriendRep&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetUserFriendRep& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetUserFriendRep* internal_default_instance() {
    return reinterpret_cast<const GetUserFriendRep*>(
               &_GetUserFriendRep_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GetUserFriendRep& a, GetUserFriendRep& b) {
    a.Swap(&b);
  }
  inline void Swap(GetUserFriendRep* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetUserFriendRep* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetUserFriendRep* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetUserFriendRep>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetUserFriendRep& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetUserFriendRep& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetUserFriendRep* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mytest.GetUserFriendRep";
  }
  protected:
  explicit GetUserFriendRep(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kErrsFieldNumber = 1,
  };
  // repeated .mytest.Detail data = 2;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::mytest::Detail* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mytest::Detail >*
      mutable_data();
  private:
  const ::mytest::Detail& _internal_data(int index) const;
  ::mytest::Detail* _internal_add_data();
  public:
  const ::mytest::Detail& data(int index) const;
  ::mytest::Detail* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mytest::Detail >&
      data() const;

  // .mytest.ErrCode errs = 1;
  bool has_errs() const;
  private:
  bool _internal_has_errs() const;
  public:
  void clear_errs();
  const ::mytest::ErrCode& errs() const;
  PROTOBUF_NODISCARD ::mytest::ErrCode* release_errs();
  ::mytest::ErrCode* mutable_errs();
  void set_allocated_errs(::mytest::ErrCode* errs);
  private:
  const ::mytest::ErrCode& _internal_errs() const;
  ::mytest::ErrCode* _internal_mutable_errs();
  public:
  void unsafe_arena_set_allocated_errs(
      ::mytest::ErrCode* errs);
  ::mytest::ErrCode* unsafe_arena_release_errs();

  // @@protoc_insertion_point(class_scope:mytest.GetUserFriendRep)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mytest::Detail > data_;
  ::mytest::ErrCode* errs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_2eproto;
};
// ===================================================================

class UserServiceRpc_Stub;

class UserServiceRpc : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline UserServiceRpc() {};
 public:
  virtual ~UserServiceRpc();

  typedef UserServiceRpc_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void Login(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::mytest::LogRequest* request,
                       ::mytest::LogResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void UserDetail(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::mytest::GetUserFriendReq* request,
                       ::mytest::GetUserFriendRep* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(UserServiceRpc);
};

class UserServiceRpc_Stub : public UserServiceRpc {
 public:
  UserServiceRpc_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  UserServiceRpc_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~UserServiceRpc_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements UserServiceRpc ------------------------------------------

  void Login(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::mytest::LogRequest* request,
                       ::mytest::LogResponse* response,
                       ::google::protobuf::Closure* done);
  void UserDetail(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::mytest::GetUserFriendReq* request,
                       ::mytest::GetUserFriendRep* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(UserServiceRpc_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LogRequest

// bytes name = 1;
inline void LogRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& LogRequest::name() const {
  // @@protoc_insertion_point(field_get:mytest.LogRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LogRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mytest.LogRequest.name)
}
inline std::string* LogRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:mytest.LogRequest.name)
  return _s;
}
inline const std::string& LogRequest::_internal_name() const {
  return name_.Get();
}
inline void LogRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LogRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LogRequest::release_name() {
  // @@protoc_insertion_point(field_release:mytest.LogRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LogRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mytest.LogRequest.name)
}

// bytes pwd = 2;
inline void LogRequest::clear_pwd() {
  pwd_.ClearToEmpty();
}
inline const std::string& LogRequest::pwd() const {
  // @@protoc_insertion_point(field_get:mytest.LogRequest.pwd)
  return _internal_pwd();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LogRequest::set_pwd(ArgT0&& arg0, ArgT... args) {
 
 pwd_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mytest.LogRequest.pwd)
}
inline std::string* LogRequest::mutable_pwd() {
  std::string* _s = _internal_mutable_pwd();
  // @@protoc_insertion_point(field_mutable:mytest.LogRequest.pwd)
  return _s;
}
inline const std::string& LogRequest::_internal_pwd() const {
  return pwd_.Get();
}
inline void LogRequest::_internal_set_pwd(const std::string& value) {
  
  pwd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LogRequest::_internal_mutable_pwd() {
  
  return pwd_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LogRequest::release_pwd() {
  // @@protoc_insertion_point(field_release:mytest.LogRequest.pwd)
  return pwd_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LogRequest::set_allocated_pwd(std::string* pwd) {
  if (pwd != nullptr) {
    
  } else {
    
  }
  pwd_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pwd,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (pwd_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    pwd_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mytest.LogRequest.pwd)
}

// -------------------------------------------------------------------

// LogResponse

// int32 errcode = 1;
inline void LogResponse::clear_errcode() {
  errcode_ = 0;
}
inline int32_t LogResponse::_internal_errcode() const {
  return errcode_;
}
inline int32_t LogResponse::errcode() const {
  // @@protoc_insertion_point(field_get:mytest.LogResponse.errcode)
  return _internal_errcode();
}
inline void LogResponse::_internal_set_errcode(int32_t value) {
  
  errcode_ = value;
}
inline void LogResponse::set_errcode(int32_t value) {
  _internal_set_errcode(value);
  // @@protoc_insertion_point(field_set:mytest.LogResponse.errcode)
}

// bytes errmsg = 2;
inline void LogResponse::clear_errmsg() {
  errmsg_.ClearToEmpty();
}
inline const std::string& LogResponse::errmsg() const {
  // @@protoc_insertion_point(field_get:mytest.LogResponse.errmsg)
  return _internal_errmsg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LogResponse::set_errmsg(ArgT0&& arg0, ArgT... args) {
 
 errmsg_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mytest.LogResponse.errmsg)
}
inline std::string* LogResponse::mutable_errmsg() {
  std::string* _s = _internal_mutable_errmsg();
  // @@protoc_insertion_point(field_mutable:mytest.LogResponse.errmsg)
  return _s;
}
inline const std::string& LogResponse::_internal_errmsg() const {
  return errmsg_.Get();
}
inline void LogResponse::_internal_set_errmsg(const std::string& value) {
  
  errmsg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LogResponse::_internal_mutable_errmsg() {
  
  return errmsg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LogResponse::release_errmsg() {
  // @@protoc_insertion_point(field_release:mytest.LogResponse.errmsg)
  return errmsg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LogResponse::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errmsg,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (errmsg_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mytest.LogResponse.errmsg)
}

// bool successful = 3;
inline void LogResponse::clear_successful() {
  successful_ = false;
}
inline bool LogResponse::_internal_successful() const {
  return successful_;
}
inline bool LogResponse::successful() const {
  // @@protoc_insertion_point(field_get:mytest.LogResponse.successful)
  return _internal_successful();
}
inline void LogResponse::_internal_set_successful(bool value) {
  
  successful_ = value;
}
inline void LogResponse::set_successful(bool value) {
  _internal_set_successful(value);
  // @@protoc_insertion_point(field_set:mytest.LogResponse.successful)
}

// -------------------------------------------------------------------

// ErrCode

// int32 errcode = 1;
inline void ErrCode::clear_errcode() {
  errcode_ = 0;
}
inline int32_t ErrCode::_internal_errcode() const {
  return errcode_;
}
inline int32_t ErrCode::errcode() const {
  // @@protoc_insertion_point(field_get:mytest.ErrCode.errcode)
  return _internal_errcode();
}
inline void ErrCode::_internal_set_errcode(int32_t value) {
  
  errcode_ = value;
}
inline void ErrCode::set_errcode(int32_t value) {
  _internal_set_errcode(value);
  // @@protoc_insertion_point(field_set:mytest.ErrCode.errcode)
}

// bytes errmsg = 2;
inline void ErrCode::clear_errmsg() {
  errmsg_.ClearToEmpty();
}
inline const std::string& ErrCode::errmsg() const {
  // @@protoc_insertion_point(field_get:mytest.ErrCode.errmsg)
  return _internal_errmsg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ErrCode::set_errmsg(ArgT0&& arg0, ArgT... args) {
 
 errmsg_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mytest.ErrCode.errmsg)
}
inline std::string* ErrCode::mutable_errmsg() {
  std::string* _s = _internal_mutable_errmsg();
  // @@protoc_insertion_point(field_mutable:mytest.ErrCode.errmsg)
  return _s;
}
inline const std::string& ErrCode::_internal_errmsg() const {
  return errmsg_.Get();
}
inline void ErrCode::_internal_set_errmsg(const std::string& value) {
  
  errmsg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ErrCode::_internal_mutable_errmsg() {
  
  return errmsg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ErrCode::release_errmsg() {
  // @@protoc_insertion_point(field_release:mytest.ErrCode.errmsg)
  return errmsg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ErrCode::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errmsg,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (errmsg_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mytest.ErrCode.errmsg)
}

// -------------------------------------------------------------------

// Detail

// uint32 id = 1;
inline void Detail::clear_id() {
  id_ = 0u;
}
inline uint32_t Detail::_internal_id() const {
  return id_;
}
inline uint32_t Detail::id() const {
  // @@protoc_insertion_point(field_get:mytest.Detail.id)
  return _internal_id();
}
inline void Detail::_internal_set_id(uint32_t value) {
  
  id_ = value;
}
inline void Detail::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mytest.Detail.id)
}

// bytes name = 2;
inline void Detail::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Detail::name() const {
  // @@protoc_insertion_point(field_get:mytest.Detail.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Detail::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mytest.Detail.name)
}
inline std::string* Detail::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:mytest.Detail.name)
  return _s;
}
inline const std::string& Detail::_internal_name() const {
  return name_.Get();
}
inline void Detail::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Detail::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Detail::release_name() {
  // @@protoc_insertion_point(field_release:mytest.Detail.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Detail::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mytest.Detail.name)
}

// uint32 age = 3;
inline void Detail::clear_age() {
  age_ = 0u;
}
inline uint32_t Detail::_internal_age() const {
  return age_;
}
inline uint32_t Detail::age() const {
  // @@protoc_insertion_point(field_get:mytest.Detail.age)
  return _internal_age();
}
inline void Detail::_internal_set_age(uint32_t value) {
  
  age_ = value;
}
inline void Detail::set_age(uint32_t value) {
  _internal_set_age(value);
  // @@protoc_insertion_point(field_set:mytest.Detail.age)
}

// .mytest.Detail.Sex sex = 4;
inline void Detail::clear_sex() {
  sex_ = 0;
}
inline ::mytest::Detail_Sex Detail::_internal_sex() const {
  return static_cast< ::mytest::Detail_Sex >(sex_);
}
inline ::mytest::Detail_Sex Detail::sex() const {
  // @@protoc_insertion_point(field_get:mytest.Detail.sex)
  return _internal_sex();
}
inline void Detail::_internal_set_sex(::mytest::Detail_Sex value) {
  
  sex_ = value;
}
inline void Detail::set_sex(::mytest::Detail_Sex value) {
  _internal_set_sex(value);
  // @@protoc_insertion_point(field_set:mytest.Detail.sex)
}

// -------------------------------------------------------------------

// GetUserFriendReq

// uint32 id = 1;
inline void GetUserFriendReq::clear_id() {
  id_ = 0u;
}
inline uint32_t GetUserFriendReq::_internal_id() const {
  return id_;
}
inline uint32_t GetUserFriendReq::id() const {
  // @@protoc_insertion_point(field_get:mytest.GetUserFriendReq.id)
  return _internal_id();
}
inline void GetUserFriendReq::_internal_set_id(uint32_t value) {
  
  id_ = value;
}
inline void GetUserFriendReq::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mytest.GetUserFriendReq.id)
}

// -------------------------------------------------------------------

// GetUserFriendRep

// .mytest.ErrCode errs = 1;
inline bool GetUserFriendRep::_internal_has_errs() const {
  return this != internal_default_instance() && errs_ != nullptr;
}
inline bool GetUserFriendRep::has_errs() const {
  return _internal_has_errs();
}
inline void GetUserFriendRep::clear_errs() {
  if (GetArenaForAllocation() == nullptr && errs_ != nullptr) {
    delete errs_;
  }
  errs_ = nullptr;
}
inline const ::mytest::ErrCode& GetUserFriendRep::_internal_errs() const {
  const ::mytest::ErrCode* p = errs_;
  return p != nullptr ? *p : reinterpret_cast<const ::mytest::ErrCode&>(
      ::mytest::_ErrCode_default_instance_);
}
inline const ::mytest::ErrCode& GetUserFriendRep::errs() const {
  // @@protoc_insertion_point(field_get:mytest.GetUserFriendRep.errs)
  return _internal_errs();
}
inline void GetUserFriendRep::unsafe_arena_set_allocated_errs(
    ::mytest::ErrCode* errs) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(errs_);
  }
  errs_ = errs;
  if (errs) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mytest.GetUserFriendRep.errs)
}
inline ::mytest::ErrCode* GetUserFriendRep::release_errs() {
  
  ::mytest::ErrCode* temp = errs_;
  errs_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mytest::ErrCode* GetUserFriendRep::unsafe_arena_release_errs() {
  // @@protoc_insertion_point(field_release:mytest.GetUserFriendRep.errs)
  
  ::mytest::ErrCode* temp = errs_;
  errs_ = nullptr;
  return temp;
}
inline ::mytest::ErrCode* GetUserFriendRep::_internal_mutable_errs() {
  
  if (errs_ == nullptr) {
    auto* p = CreateMaybeMessage<::mytest::ErrCode>(GetArenaForAllocation());
    errs_ = p;
  }
  return errs_;
}
inline ::mytest::ErrCode* GetUserFriendRep::mutable_errs() {
  ::mytest::ErrCode* _msg = _internal_mutable_errs();
  // @@protoc_insertion_point(field_mutable:mytest.GetUserFriendRep.errs)
  return _msg;
}
inline void GetUserFriendRep::set_allocated_errs(::mytest::ErrCode* errs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete errs_;
  }
  if (errs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::mytest::ErrCode>::GetOwningArena(errs);
    if (message_arena != submessage_arena) {
      errs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, errs, submessage_arena);
    }
    
  } else {
    
  }
  errs_ = errs;
  // @@protoc_insertion_point(field_set_allocated:mytest.GetUserFriendRep.errs)
}

// repeated .mytest.Detail data = 2;
inline int GetUserFriendRep::_internal_data_size() const {
  return data_.size();
}
inline int GetUserFriendRep::data_size() const {
  return _internal_data_size();
}
inline void GetUserFriendRep::clear_data() {
  data_.Clear();
}
inline ::mytest::Detail* GetUserFriendRep::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:mytest.GetUserFriendRep.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mytest::Detail >*
GetUserFriendRep::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:mytest.GetUserFriendRep.data)
  return &data_;
}
inline const ::mytest::Detail& GetUserFriendRep::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::mytest::Detail& GetUserFriendRep::data(int index) const {
  // @@protoc_insertion_point(field_get:mytest.GetUserFriendRep.data)
  return _internal_data(index);
}
inline ::mytest::Detail* GetUserFriendRep::_internal_add_data() {
  return data_.Add();
}
inline ::mytest::Detail* GetUserFriendRep::add_data() {
  ::mytest::Detail* _add = _internal_add_data();
  // @@protoc_insertion_point(field_add:mytest.GetUserFriendRep.data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mytest::Detail >&
GetUserFriendRep::data() const {
  // @@protoc_insertion_point(field_list:mytest.GetUserFriendRep.data)
  return data_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mytest

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mytest::Detail_Sex> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mytest::Detail_Sex>() {
  return ::mytest::Detail_Sex_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_test_2eproto
